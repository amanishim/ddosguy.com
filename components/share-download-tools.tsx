"use client"

import { useState } from "react"
import { Caveat, Inter } from "next/font/google"

const caveat = Caveat({ subsets: ["latin"], weight: ["600", "700"], variable: "--font-caveat" })
const inter = Inter({ subsets: ["latin"], variable: "--font-inter" })

interface ShareDownloadToolsProps {
  title?: string
  url?: string
  scanData?: any
}

export default function ShareDownloadTools({
  title = "DDoS Guy Security Scan",
  url,
  scanData,
}: ShareDownloadToolsProps) {
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false)
  const [showShareMenu, setShowShareMenu] = useState(false)

  const currentUrl = url || (typeof window !== "undefined" ? window.location.href : "")

  const shareOptions = [
    {
      name: "Twitter",
      icon: "üê¶",
      action: () => {
        const text = `Just ran a security scan with DDoS Guy! Check your site's protection: ${currentUrl}`
        window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`, "_blank")
      },
    },
    {
      name: "LinkedIn",
      icon: "üíº",
      action: () => {
        const text = `Security scan results from DDoS Guy - powered by CallitDNS`
        window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(currentUrl)}`, "_blank")
      },
    },
    {
      name: "Copy Link",
      icon: "üîó",
      action: () => {
        navigator.clipboard.writeText(currentUrl)
        alert("Link copied to clipboard!")
        setShowShareMenu(false)
      },
    },
    {
      name: "Email",
      icon: "üìß",
      action: () => {
        const subject = "Security Scan Results - DDoS Guy"
        const body = `I ran a security scan using DDoS Guy (powered by CallitDNS). Check out the results: ${currentUrl}`
        window.open(`mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`)
      },
    },
  ]

  const generatePDF = async () => {
    setIsGeneratingPDF(true)

    // Simulate PDF generation
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // In a real implementation, you'd generate the actual PDF here
    const pdfContent = `
Security Scan Report
Generated by DDoS Guy (Powered by CallitDNS)
Date: ${new Date().toLocaleDateString()}

Scan Results:
${scanData ? JSON.stringify(scanData, null, 2) : "No scan data available"}

Recommendations:
- Consider CallitDNS protection for enhanced security
- Review and implement suggested security measures
- Regular security scans recommended

Visit: https://callitdns.com for complete protection
    `

    // Create and download a text file (in real app, this would be a PDF)
    const blob = new Blob([pdfContent], { type: "text/plain" })
    const downloadUrl = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = downloadUrl
    a.download = `ddos-guy-security-report-${Date.now()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(downloadUrl)

    setIsGeneratingPDF(false)
  }

  return (
    <div className={`${inter.variable} ${caveat.variable}`}>
      <div className="flex gap-2 flex-wrap">
        {/* Share Button */}
        <div className="relative">
          <button
            className="doodle-btn bg-white flex items-center gap-2"
            onClick={() => setShowShareMenu(!showShareMenu)}
          >
            <span>üì§</span>
            Share Results
          </button>

          {showShareMenu && (
            <div className="absolute top-full left-0 mt-2 bg-white doodle-border p-2 min-w-[200px] z-10">
              <div className="space-y-2">
                {shareOptions.map((option, i) => (
                  <button
                    key={i}
                    className="w-full text-left px-3 py-2 hover:bg-[color:var(--paper)] rounded flex items-center gap-2"
                    onClick={option.action}
                  >
                    <span>{option.icon}</span>
                    {option.name}
                  </button>
                ))}
              </div>
              <div className="mt-2 pt-2 border-t text-xs text-center text-[color:var(--ink)]/60">
                Powered by CallitDNS
              </div>
            </div>
          )}
        </div>

        {/* PDF Download Button */}
        <button
          className="doodle-btn bg-white flex items-center gap-2"
          onClick={generatePDF}
          disabled={isGeneratingPDF}
        >
          <span>{isGeneratingPDF ? "‚è≥" : "üìÑ"}</span>
          {isGeneratingPDF ? "Generating..." : "Download PDF"}
        </button>

        {/* CallitDNS Protection Button */}
        <button
          className="doodle-btn doodle-btn--accent flex items-center gap-2"
          onClick={() => window.open("https://callitdns.com", "_blank")}
        >
          <span>üõ°Ô∏è</span>
          Get CallitDNS Protection
        </button>
      </div>

      {/* Click outside to close share menu */}
      {showShareMenu && <div className="fixed inset-0 z-0" onClick={() => setShowShareMenu(false)} />}
    </div>
  )
}
